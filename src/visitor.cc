#include "include/visitor.hh"

void Visitor::visit(const AST::Argument &node) {};
void Visitor::visit(const AST::ArrayExpression &node) {};
void Visitor::visit(const AST::BinaryOperationExpression &node) {};
void Visitor::visit(const AST::BlockExpression &node) {};
void Visitor::visit(const AST::BooleanLiteralExpression &node) {};
void Visitor::visit(const AST::BreakExpression &node) {};
void Visitor::visit(const AST::CallExpression &node) {};
void Visitor::visit(const AST::ClosureExpression &node) {};
void Visitor::visit(const AST::ConditionalExpression &node) {};
void Visitor::visit(const AST::ConstantDeclaration &node) {};
void Visitor::visit(const AST::ContinueExpression &node) {};
void Visitor::visit(const AST::EnumerationDeclaration &node) {};
void Visitor::visit(const AST::FloatingPointLiteralExpression &node) {};
void Visitor::visit(const AST::ForLoopExpression &node) {};
void Visitor::visit(const AST::GenericParameter &node) {};
void Visitor::visit(const AST::IntegerLiteralExpression &node) {};
void Visitor::visit(const AST::LabelDeclaration &node) {};
void Visitor::visit(const AST::ModuleDeclaration &node) {};
void Visitor::visit(const AST::Node &node) {};
void Visitor::visit(const AST::Parameter &node) {};
void Visitor::visit(const AST::RangeExpression &node) {};
void Visitor::visit(const AST::RecordDeclaration &node) {};
void Visitor::visit(const AST::RecordExpression &node) {};
void Visitor::visit(const AST::RecordFieldDeclaration &node) {};
void Visitor::visit(const AST::ReturnExpression &node) {};
void Visitor::visit(const AST::Root &node) {};
void Visitor::visit(const AST::SubroutineDeclaration &node) {};
void Visitor::visit(const AST::SubscriptExpression &node) {};
void Visitor::visit(const AST::SwitchExpression &node) {};
void Visitor::visit(const AST::TupleExpression &node) {};
void Visitor::visit(const AST::TypeAliasDeclaration &node) {};
void Visitor::visit(const AST::TypeSignature &node) {};
void Visitor::visit(const AST::UnaryOperationExpression &node) {};
void Visitor::visit(const AST::UnionDeclaration &node) {};
void Visitor::visit(const AST::WhileLoopExpression &node) {};
